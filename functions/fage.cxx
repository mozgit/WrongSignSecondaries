/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "fage.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(fage) 

 fage::fage(const char *name, const char *title, 
                        RooAbsReal& _m,
                        RooAbsReal& _mu,
                        RooAbsReal& _sigma,
                        RooAbsReal& _epsilon,
                        RooAbsReal& _rhol,
                        RooAbsReal& _rhor):
   RooAbsPdf(name,title), 
   m("m","m",this,_m),
   mu("mu","mu",this,_mu),
   sigma("sigma","sigma",this,_sigma),
   epsilon("epsilon","epsilon",this,_epsilon),
   rhol("rhol","rhol",this,_rhol),
   rhor("rhor","rhor",this,_rhor)
 { 
 } 


 fage::fage(const fage& other, const char* name) :  
   RooAbsPdf(other,name), 
   m("m",this,other.m),
   mu("mu",this,other.mu),
   sigma("sigma",this,other.sigma),
   epsilon("epsilon",this,other.epsilon),
   rhol("rhol",this,other.rhol),
   rhor("rhor",this,other.rhor)
 { 
 } 



 Double_t fage::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
  Double_t lim_min = mu - (rhol*sigma*(1-epsilon));
  Double_t lim_max = mu + (rhor*sigma*(1+epsilon));

  if (m<lim_min){
    return exp(rhol*rhol/2+rhol*(m-mu)/((1-epsilon)*sigma));
  }
  else if ((lim_min<=m)&&(m<mu)){
    return exp(-pow(((m-mu)/(pow(2,0.5)*sigma*(1-epsilon))),2));
  }
  else if ((m>=mu)&&(lim_max>m)){
    return exp(-pow(((m-mu)/(pow(2,0.5)*sigma*(1+epsilon))),2));
  }
  else
  {
    return exp(rhor*rhor/2-rhor*(m-mu)/((1+epsilon)*sigma));
  }
 } 



